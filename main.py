import tkinter as tk
from tkinter import messagebox

class TicTacToeGame:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ 2.0")
        self.window.geometry("500x650")
        self.window.configure(bg='#2c3e50')
        self.window.resizable(False, False)
        
        # –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.current_player = "X"
        self.player1_symbol = "X"
        self.player2_symbol = "O"
        self.player1_wins = 0
        self.player2_wins = 0
        self.game_active = False
        self.buttons = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_header()
        self.create_player_selection()
        self.create_game_board()
        self.create_control_buttons()
        self.create_score_display()
        
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–≥—Ä—ã"""
        header_frame = tk.Frame(self.window, bg='#2c3e50')
        header_frame.pack(pady=10)
        
        title_label = tk.Label(
            header_frame,
            text="üéÆ –ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò 2.0 üéÆ",
            font=("Arial", 20, "bold"),
            fg='#ecf0f1',
            bg='#2c3e50'
        )
        title_label.pack()
        
    def create_player_selection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞ –∏–≥—Ä–æ–∫–∞"""
        selection_frame = tk.Frame(self.window, bg='#34495e', relief='raised', bd=2)
        selection_frame.pack(pady=10, padx=20, fill='x')
        
        tk.Label(
            selection_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ò–≥—Ä–æ–∫–∞ 1:",
            font=("Arial", 12, "bold"),
            fg='#ecf0f1',
            bg='#34495e'
        ).pack(pady=5)
        
        symbol_frame = tk.Frame(selection_frame, bg='#34495e')
        symbol_frame.pack(pady=5)
        
        self.symbol_var = tk.StringVar(value="X")
        
        x_radio = tk.Radiobutton(
            symbol_frame,
            text="‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏ (X)",
            variable=self.symbol_var,
            value="X",
            font=("Arial", 11),
            fg='#e74c3c',
            bg='#34495e',
            selectcolor='#2c3e50',
            command=self.update_symbols
        )
        x_radio.pack(side='left', padx=10)
        
        o_radio = tk.Radiobutton(
            symbol_frame,
            text="‚≠ï –ù–æ–ª–∏–∫–∏ (O)",
            variable=self.symbol_var,
            value="O",
            font=("Arial", 11),
            fg='#3498db',
            bg='#34495e',
            selectcolor='#2c3e50',
            command=self.update_symbols
        )
        o_radio.pack(side='left', padx=10)
        
    def create_game_board(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
        self.info_frame = tk.Frame(self.window, bg='#2c3e50')
        self.info_frame.pack(pady=10)
        
        self.current_player_label = tk.Label(
            self.info_frame,
            text="–ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–∞—è –∏–≥—Ä–∞' –¥–ª—è –Ω–∞—á–∞–ª–∞",
            font=("Arial", 14, "bold"),
            fg='#f39c12',
            bg='#2c3e50'
        )
        self.current_player_label.pack()
        
        # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        self.game_frame = tk.Frame(self.window, bg='#34495e', relief='raised', bd=3)
        self.game_frame.pack(pady=10)
        
        self.buttons = []
        for i in range(3):
            row = []
            for j in range(3):
                btn = tk.Button(
                    self.game_frame,
                    text="",
                    font=("Arial", 24, "bold"),
                    width=4,
                    height=2,
                    bg='#ecf0f1',
                    fg='#2c3e50',
                    relief='raised',
                    bd=2,
                    command=lambda r=i, c=j: self.on_click(r, c),
                    state='disabled'
                )
                btn.grid(row=i, column=j, padx=2, pady=2)
                row.append(btn)
            self.buttons.append(row)
            
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = tk.Frame(self.window, bg='#2c3e50')
        control_frame.pack(pady=15)
        
        self.new_game_btn = tk.Button(
            control_frame,
            text="üéØ –ù–æ–≤–∞—è –∏–≥—Ä–∞",
            font=("Arial", 12, "bold"),
            bg='#27ae60',
            fg='white',
            relief='raised',
            bd=2,
            padx=20,
            pady=5,
            command=self.new_game
        )
        self.new_game_btn.pack(side='left', padx=5)
        
        self.reset_btn = tk.Button(
            control_frame,
            text="üîÑ –°–±—Ä–æ—Å –ø–æ–ª—è",
            font=("Arial", 12, "bold"),
            bg='#f39c12',
            fg='white',
            relief='raised',
            bd=2,
            padx=20,
            pady=5,
            command=self.reset_game,
            state='disabled'
        )
        self.reset_btn.pack(side='left', padx=5)
        
        self.new_tournament_btn = tk.Button(
            control_frame,
            text="üèÜ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä",
            font=("Arial", 12, "bold"),
            bg='#8e44ad',
            fg='white',
            relief='raised',
            bd=2,
            padx=20,
            pady=5,
            command=self.new_tournament
        )
        self.new_tournament_btn.pack(side='left', padx=5)
        
    def create_score_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
        score_frame = tk.Frame(self.window, bg='#34495e', relief='raised', bd=2)
        score_frame.pack(pady=10, padx=20, fill='x')
        
        tk.Label(
            score_frame,
            text="üìä –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê (–¥–æ 3 –ø–æ–±–µ–¥)",
            font=("Arial", 14, "bold"),
            fg='#ecf0f1',
            bg='#34495e'
        ).pack(pady=5)
        
        scores_container = tk.Frame(score_frame, bg='#34495e')
        scores_container.pack(pady=5)
        
        # –°—á–µ—Ç –∏–≥—Ä–æ–∫–∞ 1
        player1_frame = tk.Frame(scores_container, bg='#e74c3c', relief='raised', bd=2)
        player1_frame.pack(side='left', padx=10, pady=5)
        
        tk.Label(
            player1_frame,
            text="–ò–≥—Ä–æ–∫ 1",
            font=("Arial", 12, "bold"),
            fg='white',
            bg='#e74c3c'
        ).pack(pady=2)
        
        self.player1_score_label = tk.Label(
            player1_frame,
            text="‚ùå: 0",
            font=("Arial", 16, "bold"),
            fg='white',
            bg='#e74c3c'
        )
        self.player1_score_label.pack(pady=2)
        
        # VS
        tk.Label(
            scores_container,
            text="VS",
            font=("Arial", 16, "bold"),
            fg='#f39c12',
            bg='#34495e'
        ).pack(side='left', padx=20)
        
        # –°—á–µ—Ç –∏–≥—Ä–æ–∫–∞ 2
        player2_frame = tk.Frame(scores_container, bg='#3498db', relief='raised', bd=2)
        player2_frame.pack(side='left', padx=10, pady=5)
        
        tk.Label(
            player2_frame,
            text="–ò–≥—Ä–æ–∫ 2",
            font=("Arial", 12, "bold"),
            fg='white',
            bg='#3498db'
        ).pack(pady=2)
        
        self.player2_score_label = tk.Label(
            player2_frame,
            text="‚≠ï: 0",
            font=("Arial", 16, "bold"),
            fg='white',
            bg='#3498db'
        )
        self.player2_score_label.pack(pady=2)
        
    def update_symbols(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥—Ä–æ–∫–æ–≤"""
        if self.symbol_var.get() == "X":
            self.player1_symbol = "X"
            self.player2_symbol = "O"
            self.player1_score_label.config(text=f"‚ùå: {self.player1_wins}")
            self.player2_score_label.config(text=f"‚≠ï: {self.player2_wins}")
        else:
            self.player1_symbol = "O"
            self.player2_symbol = "X"
            self.player1_score_label.config(text=f"‚≠ï: {self.player1_wins}")
            self.player2_score_label.config(text=f"‚ùå: {self.player2_wins}")
            
    def new_game(self):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        self.game_active = True
        self.current_player = self.player1_symbol
        self.reset_btn.config(state='normal')
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(
                    text="",
                    bg='#ecf0f1',
                    state='normal'
                )
        
        self.update_current_player_display()
        
    def reset_game(self):
        """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
        self.current_player = self.player1_symbol
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(
                    text="",
                    bg='#ecf0f1',
                    state='normal'
                )
        
        self.update_current_player_display()
        
    def new_tournament(self):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
        self.player1_wins = 0
        self.player2_wins = 0
        self.update_score_display()
        self.new_game()
        
    def update_current_player_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        if self.current_player == self.player1_symbol:
            symbol_emoji = "‚ùå" if self.player1_symbol == "X" else "‚≠ï"
            self.current_player_label.config(
                text=f"–•–æ–¥ –ò–≥—Ä–æ–∫–∞ 1: {symbol_emoji} ({self.player1_symbol})",
                fg='#e74c3c'
            )
        else:
            symbol_emoji = "‚≠ï" if self.player2_symbol == "O" else "‚ùå"
            self.current_player_label.config(
                text=f"–•–æ–¥ –ò–≥—Ä–æ–∫–∞ 2: {symbol_emoji} ({self.player2_symbol})",
                fg='#3498db'
            )
            
    def update_score_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
        if self.player1_symbol == "X":
            self.player1_score_label.config(text=f"‚ùå: {self.player1_wins}")
            self.player2_score_label.config(text=f"‚≠ï: {self.player2_wins}")
        else:
            self.player1_score_label.config(text=f"‚≠ï: {self.player1_wins}")
            self.player2_score_label.config(text=f"‚ùå: {self.player2_wins}")
            
    def check_winner(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
        for i in range(3):
            if (self.buttons[i][0]["text"] == self.buttons[i][1]["text"] == 
                self.buttons[i][2]["text"] != ""):
                return self.buttons[i][0]["text"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for i in range(3):
            if (self.buttons[0][i]["text"] == self.buttons[1][i]["text"] == 
                self.buttons[2][i]["text"] != ""):
                return self.buttons[0][i]["text"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
        if (self.buttons[0][0]["text"] == self.buttons[1][1]["text"] == 
            self.buttons[2][2]["text"] != ""):
            return self.buttons[0][0]["text"]
        
        if (self.buttons[0][2]["text"] == self.buttons[1][1]["text"] == 
            self.buttons[2][0]["text"] != ""):
            return self.buttons[0][2]["text"]
        
        return None
        
    def check_draw(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π"""
        for i in range(3):
            for j in range(3):
                if self.buttons[i][j]["text"] == "":
                    return False
        return True
        
    def disable_all_buttons(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—è"""
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(state='disabled')
                
    def highlight_winning_line(self, winner):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ª–∏–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
        for i in range(3):
            if (self.buttons[i][0]["text"] == self.buttons[i][1]["text"] == 
                self.buttons[i][2]["text"] == winner):
                for j in range(3):
                    self.buttons[i][j].config(bg='#2ecc71')
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for i in range(3):
            if (self.buttons[0][i]["text"] == self.buttons[1][i]["text"] == 
                self.buttons[2][i]["text"] == winner):
                for j in range(3):
                    self.buttons[j][i].config(bg='#2ecc71')
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
        if (self.buttons[0][0]["text"] == self.buttons[1][1]["text"] == 
            self.buttons[2][2]["text"] == winner):
            for i in range(3):
                self.buttons[i][i].config(bg='#2ecc71')
            return
        
        if (self.buttons[0][2]["text"] == self.buttons[1][1]["text"] == 
            self.buttons[2][0]["text"] == winner):
            for i in range(3):
                self.buttons[i][2-i].config(bg='#2ecc71')
            return
    
    def on_click(self, row, col):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ"""
        if not self.game_active or self.buttons[row][col]['text'] != "":
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–∞
        self.buttons[row][col]['text'] = self.current_player
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞
        if self.current_player == "X":
            self.buttons[row][col].config(fg='#e74c3c', bg='#fadbd8')
        else:
            self.buttons[row][col].config(fg='#3498db', bg='#d6eaf8')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = self.check_winner()
        if winner:
            self.game_active = False
            self.highlight_winning_line(winner)
            self.disable_all_buttons()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            if winner == self.player1_symbol:
                self.player1_wins += 1
                winner_name = "–ò–≥—Ä–æ–∫ 1"
            else:
                self.player2_wins += 1
                winner_name = "–ò–≥—Ä–æ–∫ 2"
            
            self.update_score_display()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            if self.player1_wins == 3:
                messagebox.showinfo(
                    "üèÜ –¢–£–†–ù–ò–† –û–ö–û–ù–ß–ï–ù!",
                    f"üéâ –ò–ì–†–û–ö 1 –í–´–ò–ì–†–ê–õ –¢–£–†–ù–ò–†!\n\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.player1_wins}:{self.player2_wins}\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! üèÜ"
                )
                self.current_player_label.config(
                    text="üèÜ –ò–≥—Ä–æ–∫ 1 - –ß–ï–ú–ü–ò–û–ù –¢–£–†–ù–ò–†–ê! üèÜ",
                    fg='#f39c12'
                )
            elif self.player2_wins == 3:
                messagebox.showinfo(
                    "üèÜ –¢–£–†–ù–ò–† –û–ö–û–ù–ß–ï–ù!",
                    f"üéâ –ò–ì–†–û–ö 2 –í–´–ò–ì–†–ê–õ –¢–£–†–ù–ò–†!\n\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.player1_wins}:{self.player2_wins}\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π! üèÜ"
                )
                self.current_player_label.config(
                    text="üèÜ –ò–≥—Ä–æ–∫ 2 - –ß–ï–ú–ü–ò–û–ù –¢–£–†–ù–ò–†–ê! üèÜ",
                    fg='#f39c12'
                )
            else:
                symbol_emoji = "‚ùå" if winner == "X" else "‚≠ï"
                messagebox.showinfo(
                    "üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
                    f"üéâ {winner_name} ({symbol_emoji}) –ø–æ–±–µ–¥–∏–ª!\n\n–°—á–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {self.player1_wins}:{self.player2_wins}\n\n(–ò–≥—Ä–∞–µ–º –¥–æ 3 –ø–æ–±–µ–¥)"
                )
                self.current_player_label.config(
                    text=f"üéâ {winner_name} –≤—ã–∏–≥—Ä–∞–ª! –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'",
                    fg='#2ecc71'
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–µ–π
        if self.check_draw():
            self.game_active = False
            self.disable_all_buttons()
            messagebox.showinfo(
                "ü§ù –ù–∏—á—å—è!",
                f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π!\n\n–°—á–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ –æ—Å—Ç–∞–µ—Ç—Å—è: {self.player1_wins}:{self.player2_wins}"
            )
            self.current_player_label.config(
                text="ü§ù –ù–∏—á—å—è! –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤–∞—è –∏–≥—Ä–∞'",
                fg='#95a5a6'
            )
            return
        
        # –°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
        if self.current_player == self.player1_symbol:
            self.current_player = self.player2_symbol
        else:
            self.current_player = self.player1_symbol
            
        self.update_current_player_display()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        self.window.mainloop()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
if __name__ == "__main__":
    game = TicTacToeGame()
    game.run()
